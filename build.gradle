import groovy.json.*;

// -------------------- plug-ins -------------------- //

plugins {
	id 'com.softicar.gradle.java.library' version '4.0.3'
	id 'com.softicar.gradle.code.validation' version '4.0.3' apply false
	id 'com.softicar.gradle.dependency.validation' version '4.0.3' apply false
	id 'com.softicar.gradle.selenium.grid' version '4.0.3'
	id 'com.softicar.gradle.test.logger' version '4.0.3' apply false
}

// -------------------- dependencies -------------------- //

// The identifiers below correspond to artifact names in camelCase.
project.ext {
	versions = [
		asm: "9.1",
		bcprov: "1.70",
		byteBuddy: "1.12.10",
		classgraph: "4.8.138",
		commonsCodec: "1.15",
		commonsCollections4: "4.4",
		commonsCompress: "1.21",
		commonsLang3: "3.11",
		commonsNet: "3.7.2",
		commonsText: "1.9",
		gson: "2.8.9",
		guava: "31.1-jre",
		h2: "2.1.214",
		hikariCp: "5.0.1",
		imageioJpeg: "3.8.2",
		// optional dependency of pdfbox; enables rendering of jpeg2000-encoded embedded images
		jaiImageioJpeg2000: "1.4.0",
		jakartaActivation: "1.2.2",
		javaxServletApi: "4.0.1",
		jcifsNg: "2.1.7",
		jetty: "9.4.48.v20220622",
		jsch: "0.1.55",
		jsonPath: "2.7.0",
		junit: "4.13.2",
		log4j: "2.17.2",
		mariadbJavaClient: "2.7.0",
		mockito: "4.3.1",
		netty: "4.1.79.Final",
		pdfbox: "2.0.25",
		poi: "5.2.2",
		selenium: "4.2.2",
		slf4j: "1.7.33",
		sunMail: "1.6.7",
		tesseractPlatform: "4.1.1-1.5.4",
	]
}

if(project.hasProperty('dependencyProxy')) {
	println "Using dependency proxy: $dependencyProxy"
	subprojects {
		repositories {
			maven {
				allowInsecureProtocol true
				url project['dependencyProxy']
			}
		}
	}
} else {
	subprojects {
		repositories {
			mavenCentral()
		}
	}
}

subprojects {
	configurations.all {
		resolutionStrategy {
			failOnVersionConflict()
			// versions below 30.0 have known vulnerabilities
			force "com.google.guava:guava:$versions.guava";
			force "com.sun.activation:jakarta.activation:$versions.jakartaActivation"
			force "commons-codec:commons-codec:$versions.commonsCodec"
			force "javax.servlet:javax.servlet-api:$versions.javaxServletApi"
			force "net.bytebuddy:byte-buddy:$versions.byteBuddy"
			// versions below 1.21 have known vulnerabilities
			force "org.apache.commons:commons-compress:$versions.commonsCompress"
			force "org.apache.logging.log4j:log4j-api:$versions.log4j"
			force "org.bouncycastle:bcprov-jdk15on:$versions.bcprov"
			force "org.slf4j:slf4j-api:$versions.slf4j"

			eachDependency { details ->
				// force version for most 'io.netty' dependencies
				if (details.requested.group == 'io.netty') {
					if(details.requested.name != 'netty-tcnative-classes') {
						details.useVersion "$versions.netty"
					}
				}
			}
		}
	}

	task allDependencies(type: DependencyReportTask) {
		// nothing
	}

	apply plugin: 'com.softicar.gradle.dependency.validation'
	check.dependsOn softicarDependencyValidation
}

// -------------------- compile -------------------- //

subprojects {
	apply plugin: 'com.softicar.gradle.java.library' 

	sourceCompatibility = "15"
	targetCompatibility = "15"

	compileJava {
		options.encoding = "UTF-8"
	}

	compileTestJava {
		options.encoding = "UTF-8"
	}

	processResources {
		from('src/main/java') {
			include '**/*.sqml'
		}
	}
}

// -------------------- test -------------------- //

subprojects {
	apply plugin: 'com.softicar.gradle.test.logger'

	test {
		maxHeapSize = "2G"
		systemProperty 'java.awt.headless', 'true'
	}

	dependencies {
		testImplementation "junit:junit:$versions.junit"
		testImplementation "org.mockito:mockito-core:$versions.mockito"
	}
}

// -------------------- validation -------------------- //

subprojects {
	apply plugin: 'com.softicar.gradle.code.validation'

	softicarCodeValidationSettings {
		validationEntryPointClass = "com.softicar.platform.common.core.java.code.validation.JavaCodeValidationEntryPoint"
		def configurationJson = [
			mandatoryTranslations: ["de"],
			integrationProjectName: "platform-integration",
			tablePackagePrefix: "com.softicar.platform",
			databaseStructureVersionResourceContainerClass: "com.softicar.platform.integration.database.structure.version.PlatformDatabaseStructureVersionResource",

			classesAllowedToHaveMainMethod: [
				"com.softicar.platform.ajax.server.AjaxDomNodeServer",
				"com.softicar.platform.ajax.testing.cases.TestCasesDiv",
				"com.softicar.platform.common.core.java.code.validation.JavaCodeValidationEntryPoint",
				"com.softicar.platform.core.module.program.ProgramStarter",
				"com.softicar.platform.db.sql.expressions.SqlAllExpressionsGenerator",
				"com.softicar.platform.db.sql.SqlMasterGenerator"
			],
			forbiddenClasses: [
				"com.softicar.platform.db.core.statement.DbStatement",
				"java.sql.Connection",
				"java.sql.Driver",
				"java.sql.DriverManager",
				"java.sql.ResultSet",
				"java.sql.ResultSetMetaData",
				"java.sql.Statement"
			],
			packageTreesAllowedToUseForbiddenClasses: [
				"com.softicar.platform.db",
				"com.softicar.platform.integration.database.structure.version"
			],
		]
		arguments = [ "--configurationJson", JsonOutput.toJson(configurationJson) ]
	}

	check.dependsOn softicarCodeValidation
}

// -------------------- publishing -------------------- //

def PUBLISH_TARGET = findProperty('publish.target')
def PUBLISH_URL = findProperty('publish.url')
def PUBLISH_USERNAME = findProperty('publish.username')
def PUBLISH_PASSWORD = findProperty('publish.password')
def SIGNING_KEY_ID = findProperty('signing.keyId')
def SIGNING_PASSWORD = findProperty('signing.password')
def SIGNING_SECRET_KEY_RING_FILE = findProperty('signing.secretKeyRingFile')

subprojects {
	apply plugin: 'maven-publish'
	apply plugin: 'signing'

	javadoc {
		options.encoding = 'UTF-8'
	}
	java {
		withJavadocJar()
		withSourcesJar()
	}
	publishing {
		repositories {
			if(PUBLISH_TARGET == 'remote') {
				maven {
					if(PUBLISH_URL != null) {
						url = PUBLISH_URL
						if(PUBLISH_USERNAME != null) {
							credentials(PasswordCredentials) {
								username PUBLISH_USERNAME
								password PUBLISH_PASSWORD
							}
						}
					}
				}
			} else if(PUBLISH_TARGET == 'local') {
				maven {
					url = System.properties['user.home'] + '/.softicar/maven-local'
				}
			}
		}
		publications {
			mavenJava(MavenPublication) {
				from components.java
				pom {
					name = 'SoftiCAR Platform'
					description = 'The SoftiCAR Platform is a lightweight, Java-based library to create interactive business web applications.'
					url = 'https://github.com/softicar/platform'
					developers {
						developer {
							name = 'SoftiCAR'
							email = 'opensource@softicar.com'
							organization = 'SoftiCAR'
							organizationUrl = 'https://github.com/softicar'
						}
					}
					licenses {
						license {
							name = 'MIT License'
							url = 'https://github.com/softicar/platform/blob/main/LICENSE'
						}
					}
					scm {
						connection = 'scm:git:git://github.com/softicar/platform.git'
						developerConnection = 'scm:git:ssh://github.com:softicar/platform.git'
						url = 'https://github.com/softicar/platform/tree/main'
					}
				}
			}
		}
	}

	signing {
		if(PUBLISH_TARGET == 'remote') {
			sign publishing.publications.mavenJava
		}
	}

	publish.doFirst {
		if(PUBLISH_TARGET != 'remote' && PUBLISH_TARGET != 'local') {
			throw new GradleException("Please specify the publication target with '-Ppublish.target=[remote|local]'.")
		}
		if(version == "unspecified") {
			throw new GradleException("Please specify the version to publish with '-Pversion=X.Y.Z'.")
		}
	}

	// This task is created dynamically, upon a valid 'signing' definition.
	if(tasks.findByName('signMavenJavaPublication')) {
		signMavenJavaPublication.doFirst {
			if(PUBLISH_TARGET == 'remote') {
				if(SIGNING_KEY_ID == null) {
					throw new GradleException("Please specify the PGP signing key ID with 'signing.keyId' in '~/.gradle/gradle.properties'.")
				}
				if(SIGNING_PASSWORD == null) {
					throw new GradleException("Please specify the PGP secret key password with 'signing.password' in '~/.gradle/gradle.properties'.")
				}
				if(SIGNING_SECRET_KEY_RING_FILE == null) {
					throw new GradleException("Please specify the PGP secret key ring file with 'signing.secretKeyRingFile' in '~/.gradle/gradle.properties'.")
				}
			}
		}
	}

	// This task is created dynamically, upon a valid 'publishing' definition.
	if(tasks.findByName('publishMavenJavaPublicationToMavenRepository')) {
		publishMavenJavaPublicationToMavenRepository.doFirst {
			if(PUBLISH_TARGET != 'remote' && PUBLISH_TARGET != 'local') {
				throw new GradleException("Please specify the publication target with '-Ppublish.target=[remote|local]'.")
			}
			if(version == "unspecified") {
				throw new GradleException("Please specify the version to publish with '-Pversion=X.Y.Z'.")
			}
			if(PUBLISH_TARGET == 'remote') {
				if(PUBLISH_URL == null) {
					throw new GradleException("Please specify the remote publication URL with 'publish.url' in '~/.gradle/gradle.properties'.")
				}
				if(PUBLISH_USERNAME == null) {
					throw new GradleException("Please specify the remote publication username with 'publish.username' in '~/.gradle/gradle.properties'.")
				}
				if(PUBLISH_PASSWORD == null) {
					throw new GradleException("Please specify the remote publication password with 'publish.password' in '~/.gradle/gradle.properties'.")
				}
			}
		}
	}
}

// -------------------- Eclipse access rules -------------------- //

import org.gradle.plugins.ide.eclipse.model.AccessRule

String JRE_CONTAINER = 'org.eclipse.jdt.launching.JRE_CONTAINER'
String BUILDSHIP_CONTAINER_PATH = 'org.eclipse.buildship.core.gradleclasspathcontainer'

subprojects {
	apply plugin: 'eclipse'

	eclipse.classpath {
		containers BUILDSHIP_CONTAINER_PATH
		file {
			whenMerged {
				def jre = entries.find { it.path.startsWith(JRE_CONTAINER) }
				jre.accessRules.add(new AccessRule('1', 'com/sun/**'))
				jre.accessRules.add(new AccessRule('1', 'java/applet/**'))
				jre.accessRules.add(new AccessRule('1', 'java/awt/List'))
				jre.accessRules.add(new AccessRule('1', 'javax/swing/**'))
				jre.accessRules.add(new AccessRule('1', 'javax/sql/rowset/Predicate'))
				jre.accessRules.add(new AccessRule('1', 'jdk/**'))
				jre.accessRules.add(new AccessRule('1', 'org/graalvm/**'))
				jre.accessRules.add(new AccessRule('1', 'sun/**'))
			
				def buildship = entries.find { it.path.equals(BUILDSHIP_CONTAINER_PATH) }
				buildship.accessRules.add(new AccessRule('1', '**/BiConsumer'))
				buildship.accessRules.add(new AccessRule('1', '**/Collection'))
				buildship.accessRules.add(new AccessRule('1', '**/Consumer'))
				buildship.accessRules.add(new AccessRule('1', '**/Function'))
				buildship.accessRules.add(new AccessRule('1', '**/Iterable'))
				buildship.accessRules.add(new AccessRule('1', '**/Iterator'))
				buildship.accessRules.add(new AccessRule('1', '**/List'))
				buildship.accessRules.add(new AccessRule('1', '**/Map'))
				buildship.accessRules.add(new AccessRule('1', '**/Objects'))
				buildship.accessRules.add(new AccessRule('1', '**/Optional'))
				buildship.accessRules.add(new AccessRule('1', '**/Predicate'))
				buildship.accessRules.add(new AccessRule('1', '**/Set'))
				buildship.accessRules.add(new AccessRule('1', '**/Supplier'))
				buildship.accessRules.add(new AccessRule('1', 'com/google/**/Charsets'))
				buildship.accessRules.add(new AccessRule('1', 'junit/**'))
				buildship.accessRules.add(new AccessRule('1', 'org/**/Log'))
				buildship.accessRules.add(new AccessRule('1', 'org/**/Pair'))
				buildship.accessRules.add(new AccessRule('1', 'org/apache/**/Charsets'))
				buildship.accessRules.add(new AccessRule('1', 'org/apache/commons/logging/**'))
				buildship.accessRules.add(new AccessRule('1', 'org/apache/poi/ss/formula/functions/T'))
				buildship.accessRules.add(new AccessRule('1', 'org/apache/xmlbeans/impl/**'))
			}
		}
	}
}
