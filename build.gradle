// -------------------- build script -------------------- //

buildscript {
	repositories {
		ivy {
			allowInsecureProtocol true
			url project['com.softicar.ivy.repository.url']
		}
		if(project.hasProperty('com.softicar.maven.proxies')) {
			for(proxy: project['com.softicar.maven.proxies'].split("\\s")) {
				maven {
					allowInsecureProtocol true
					url proxy
				}
			}
		} else {
			maven { url 'https://plugins.gradle.org/m2/' }
		}
	}
	dependencies.classpath "com.softicar:com.softicar.gradle.plugin:3.1.3"
}

// -------------------- plug-ins -------------------- //

apply plugin: 'com.softicar.gradle.java.library' 
apply plugin: 'com.softicar.gradle.release' 
apply plugin: 'com.softicar.gradle.selenium.grid'

// -------------------- dependencies -------------------- //

// The identifiers below correspond to artifact names in camelCase.
project.ext {
	versions = [
		asm: "9.0",
		byteBuddy: "1.10.18",
		classgraph: "4.8.90",
		commonsCodec: "1.15",
		commonsFileupload: "1.4",
		commonsLang3: "3.11",
		commonsNet: "3.7.2",
		commonsText: "1.9",
		gson: "2.8.7",
		h2: "1.4.199",
		hikariCp: "3.4.5",
		imgscalr: "4.2", // no longer maintained - this version dates back to 2012
		javaxServletApi: "4.0.1",
		jcifs: "1.3.17",
		jetty: "9.4.34.v20201102",
		jsch: "0.1.55",
		junit: "4.13.1",
		mockito: "3.6.0",
		pdfbox: "2.0.24",
		poi: "4.1.2",
		selenium: "3.141.59",
		sunMail: "1.6.5",
		tesseractPlatform: "4.1.1-1.5.4",
		zxing: "3.4.1",
	]
}

subprojects {
	repositories {
		if(project.hasProperty('com.softicar.maven.proxies')) {
			for(proxy: project['com.softicar.maven.proxies'].split("\\s")) {
				maven {
					allowInsecureProtocol true
					url proxy
				}
			}
		} else {
			mavenCentral()
		}
	}

	configurations.all {
		resolutionStrategy {
			failOnVersionConflict()
			force "commons-codec:commons-codec:$versions.commonsCodec"
			force "javax.servlet:javax.servlet-api:$versions.javaxServletApi"
			force "net.bytebuddy:byte-buddy:$versions.byteBuddy"
		}
	}

	task allDependencies(type: DependencyReportTask) {
		// nothing
	}

	apply plugin: 'com.softicar.gradle.dependency.validation'
	check.dependsOn softicarDependencyValidation
}

// -------------------- compile -------------------- //

subprojects {
	apply plugin: 'com.softicar.gradle.java.library' 

	sourceCompatibility = "15"
	targetCompatibility = "15"

	compileJava {
		options.encoding = "UTF-8"
	}

	processResources {
		from('src/main/java') {
			include '**/*.sqml'
		}
	}
}

// -------------------- test -------------------- //

subprojects {
	apply plugin: 'com.softicar.gradle.test.logger'

	test {
		maxHeapSize = "2G"
		systemProperty 'java.awt.headless', 'true'
	}

	dependencies {
		testImplementation "junit:junit:$versions.junit"
		testImplementation "org.mockito:mockito-core:$versions.mockito"
	}
}

// -------------------- validation -------------------- //

subprojects {
	apply plugin: 'com.softicar.gradle.code.validation'

	softicarCodeValidationSettings {
		validationEntryPointClass = "com.softicar.platform.common.core.java.code.validation.JavaCodeValidationEntryPoint"
		arguments = [ "--mandatoryTranslations", "de" ]
	}

	check.dependsOn softicarCodeValidation
}

// -------------------- publish -------------------- //

if(project.hasProperty('com.softicar.ivy.repository.upload.url')) {
	subprojects {
		apply plugin: 'com.softicar.gradle.ivy.publish'
	
		softicarIvyPublishSettings {
			ivyUploadUrl = project['com.softicar.ivy.repository.upload.url']
			if(project.hasProperty('com.softicar.ivy.repository.upload.username')) {
				ivyUploadUsername = project['com.softicar.ivy.repository.upload.username']
				ivyUploadPassword = project['com.softicar.ivy.repository.upload.password']
			}
		}
	
		rootProject.afterReleaseBuild.dependsOn publish
	}
}

// -------------------- access rules -------------------- //

import org.gradle.plugins.ide.eclipse.model.AccessRule

String JRE_CONTAINER = 'org.eclipse.jdt.launching.JRE_CONTAINER'
String BUILDSHIP_CONTAINER_PATH = 'org.eclipse.buildship.core.gradleclasspathcontainer'

subprojects {
	apply plugin: 'eclipse'

	eclipse.classpath {
		containers BUILDSHIP_CONTAINER_PATH
		file {
			whenMerged {
				def jre = entries.find { it.path.startsWith(JRE_CONTAINER) }
				jre.accessRules.add(new AccessRule('1', 'com/sun/**'))
				jre.accessRules.add(new AccessRule('1', 'java/awt/List'))
				jre.accessRules.add(new AccessRule('1', 'jdk/**'))
				jre.accessRules.add(new AccessRule('1', 'sun/**'))
			
				def buildship = entries.find { it.path.equals(BUILDSHIP_CONTAINER_PATH) }
				buildship.accessRules.add(new AccessRule('1', '**/Collection'))
				buildship.accessRules.add(new AccessRule('1', '**/Function'))
				buildship.accessRules.add(new AccessRule('1', '**/Predicate'))
				buildship.accessRules.add(new AccessRule('1', '**/Supplier'))
				buildship.accessRules.add(new AccessRule('1', '**/Objects'))
				buildship.accessRules.add(new AccessRule('1', '**/Optional'))
				buildship.accessRules.add(new AccessRule('1', 'junit/**'))
				buildship.accessRules.add(new AccessRule('1', 'org/apache/commons/logging/**'))
				buildship.accessRules.add(new AccessRule('1', 'org/apache/poi/ss/formula/functions/T'))
				buildship.accessRules.add(new AccessRule('1', 'org/apache/xmlbeans/impl/**'))
			}
		}
	}
}
