package com.softicar.platform.db.sql.token;

public enum SqlKeyword implements ISqlToken {

	ACCESSIBLE,
	ACCOUNT,
	ACTION,
	ADD,
	AFTER,
	AGAINST,
	AGGREGATE,
	ALGORITHM,
	ALL,
	ALTER,
	ALWAYS,
	ANALYSE,
	ANALYZE,
	AND,
	ANY,
	AS,
	ASC,
	ASCII,
	ASENSITIVE,
	AT,
	AUTO_INCREMENT,
	AVG(SqlKeywordType.FUNCTION),
	BEFORE,
	BEGIN,
	BETWEEN,
	BIGINT(SqlKeywordType.TYPE),
	BINARY(SqlKeywordType.TYPE),
	BLOB(SqlKeywordType.TYPE),
	BOOLEAN(SqlKeywordType.TYPE),
	BOTH,
	BTREE,
	BY,
	CALL,
	CASCADE,
	CASE,
	CAST(SqlKeywordType.FUNCTION),
	CHANGE,
	CHAR(SqlKeywordType.TYPE),
	CHARACTER(SqlKeywordType.TYPE),
	CHAR_LENGTH(SqlKeywordType.FUNCTION),
	CHECK,
	CHECKSUM,
	CLOB(SqlKeywordType.TYPE),
	COLLATE,
	COLUMN,
	COLUMN_FORMAT,
	COLUMNS,
	COPY,
	COMMENT,
	COMMIT,
	CONCAT(SqlKeywordType.FUNCTION),
	CONDITION,
	CONSTRAINT,
	CONTINUE,
	CONVERT,
	COUNT(SqlKeywordType.FUNCTION),
	CREATE,
	CROSS,
	CURRENT_DATE,
	CURRENT_TIME,
	CURRENT_TIMESTAMP,
	CURRENT_USER,
	CURSOR,
	DATABASE,
	DATABASES,
	DATA,
	DATE(SqlKeywordType.TYPE),
	DAY(SqlKeywordType.TYPE),
	DAY_HOUR,
	DAY_MICROSECOND,
	DAY_MINUTE,
	DAY_SECOND,
	DEC,
	DECIMAL(SqlKeywordType.TYPE),
	DECLARE,
	DEFAULT,
	DELAYED,
	DELETE,
	DESC,
	DESCRIBE,
	DETERMINISTIC,
	DIRECTORY,
	DISABLE,
	DISCARD,
	DISK,
	DISTINCT,
	DISTINCTROW,
	DIV,
	DOUBLE(SqlKeywordType.TYPE),
	DROP,
	DUAL,
	DYNAMIC,
	EACH,
	ELSE,
	ELSEIF,
	ENABLE,
	ENCLOSED,
	END,
	ENFORCED,
	ENGINE,
	ESCAPE,
	ESCAPED,
	EXISTS,
	EXIT,
	FALSE,
	FETCH,
	FIRST(SqlKeywordType.FUNCTION),
	FIXED,
	FLOAT(SqlKeywordType.TYPE),
	FLOAT4(SqlKeywordType.TYPE),
	FLOAT8(SqlKeywordType.TYPE),
	FOR,
	FORCE,
	FOREIGN,
	FROM,
	FULL,
	FULLTEXT,
	FUNCTION,
	GENERATED,
	GET,
	GLOBAL,
	GRANT,
	GROUP,
	GROUPING,
	GROUP_CONCAT(SqlKeywordType.FUNCTION),
	HASH,
	HAVING,
	HIGH_PRIORITY,
	HOUR(SqlKeywordType.TYPE),
	HOUR_MICROSECOND,
	HOUR_MINUTE,
	HOUR_SECOND,
	IDENTITY,
	IF(SqlKeywordType.FUNCTION),
	IFNULL(SqlKeywordType.FUNCTION),
	IGNORE,
	IMPORT,
	IN,
	INDEX,
	INFILE,
	INNER,
	INOUT,
	INPLACE,
	INSENSITIVE,
	INSERT,
	INSTANT,
	INT(SqlKeywordType.TYPE),
	INT1(SqlKeywordType.TYPE),
	INT2(SqlKeywordType.TYPE),
	INT3(SqlKeywordType.TYPE),
	INT4(SqlKeywordType.TYPE),
	INT8(SqlKeywordType.TYPE),
	INTEGER(SqlKeywordType.TYPE),
	INTERSECT,
	INTERVAL,
	INTO,
	INVISIBLE,
	IS,
	ITERATE,
	JOIN,
	KEY,
	KEYS,
	KILL,
	LANGUAGE,
	LAST(SqlKeywordType.FUNCTION),
	LEADING,
	LEAVE,
	LEFT,
	LENGTH(SqlKeywordType.FUNCTION),
	LIKE,
	LIMIT,
	LINEAR,
	LINES,
	LIST,
	LOAD,
	LOCAL,
	LOCALTIME,
	LOCALTIMESTAMP,
	LOCK,
	LONG(SqlKeywordType.TYPE),
	LONGBLOB(SqlKeywordType.TYPE),
	LONGTEXT(SqlKeywordType.TYPE),
	LOOP,
	LOWER(SqlKeywordType.FUNCTION),
	LOW_PRIORITY,
	LPAD(SqlKeywordType.FUNCTION),
	LTRIM(SqlKeywordType.FUNCTION),
	MASTER_BIND,
	MATCH,
	MAX(SqlKeywordType.FUNCTION),
	MAXVALUE,
	MEDIUMBLOB(SqlKeywordType.TYPE),
	MEDIUMINT(SqlKeywordType.TYPE),
	MEDIUMTEXT(SqlKeywordType.TYPE),
	MEMBER,
	MEMORY,
	MERGE,
	METHOD,
	MIDDLEINT(SqlKeywordType.TYPE),
	MIN(SqlKeywordType.FUNCTION),
	MINUTE(SqlKeywordType.TYPE),
	MINUTE_MICROSECOND,
	MINUTE_SECOND,
	MOD,
	MODIFY,
	MODIFIES,
	MONTH(SqlKeywordType.TYPE),
	NATURAL,
	NCHAR(SqlKeywordType.TYPE),
	NCLOB(SqlKeywordType.TYPE),
	NEW,
	NO,
	NONE,
	NOT,
	NOW(SqlKeywordType.FUNCTION),
	NO_WRITE_TO_BINLOG,
	NULL,
	NUMERIC(SqlKeywordType.TYPE),
	OCTET_LENGTH(SqlKeywordType.FUNCTION),
	OF,
	OFFSET,
	OLD,
	ON,
	ONLY,
	OPEN,
	OPTIMIZE,
	OPTIMIZER_COSTS,
	OPTION,
	OPTIONALLY,
	OR,
	ORDER,
	OUT,
	OUTER,
	OUTFILE,
	OUTPUT,
	OVER,
	OVERLAPS,
	PARAMETER,
	PARTIAL,
	PARTITION,
	PARTITIONS,
	PASSWORD,
	PRECISION,
	PREPARE,
	PRIMARY,
	PROCEDURE,
	PURGE,
	RANGE,
	READ,
	READS,
	READ_WRITE,
	REAL,
	REFERENCES,
	REFERENCING,
	REGEXP,
	RELEASE,
	RENAME,
	REPEAT,
	REPLACE,
	REQUIRE,
	RESIGNAL,
	RESTRICT,
	RETURN,
	REVOKE,
	RIGHT,
	RLIKE,
	ROLLBACK,
	ROW(SqlKeywordType.FUNCTION),
	ROWS,
	RPAD(SqlKeywordType.FUNCTION),
	RTRIM(SqlKeywordType.FUNCTION),
	SAVEPOINT,
	SCHEMA,
	SCHEMAS,
	SECOND_MICROSECOND,
	SELECT,
	SENSITIVE,
	SEPARATOR,
	SET,
	SHOW,
	SIGNAL,
	SIGNED(SqlKeywordType.TYPE),
	SIMPLE,
	SMALLINT(SqlKeywordType.TYPE),
	SPATIAL,
	SPECIFIC,
	SQL,
	SQLEXCEPTION,
	SQLSTATE,
	SQLWARNING,
	SQL_BIG_RESULT,
	SQL_SMALL_RESULT,
	SSL,
	START,
	STARTING,
	STORAGE,
	STORED,
	STRAIGHT_JOIN,
	SUBPARTITION,
	SUBPARTITIONS,
	SUBSTR(SqlKeywordType.FUNCTION),
	SUBSTRING(SqlKeywordType.FUNCTION),
	SUM(SqlKeywordType.FUNCTION),
	TABLE,
	TABLESPACE,
	TEMPORARY,
	TERMINATED,
	THEN,
	TIME(SqlKeywordType.TYPE),
	TIMESTAMP(SqlKeywordType.TYPE),
	TINYBLOB(SqlKeywordType.TYPE),
	TINYINT(SqlKeywordType.TYPE),
	TINYTEXT(SqlKeywordType.TYPE),
	TO,
	TOP,
	TRAILING,
	TRIGGER,
	TRIM(SqlKeywordType.FUNCTION),
	TRUE,
	UNDO,
	UNION,
	UNIQUE,
	UNLOCK,
	UNSIGNED(SqlKeywordType.TYPE),
	UPDATE,
	UPPER(SqlKeywordType.FUNCTION),
	USAGE,
	USE,
	USING,
	UTC_DATE,
	UTC_TIME,
	UTC_TIMESTAMP,
	VALIDATION,
	VALUE,
	VALUES,
	VARBINARY(SqlKeywordType.TYPE),
	VARCHAR(SqlKeywordType.TYPE),
	VARCHARACTER(SqlKeywordType.TYPE),
	VARYING,
	VIEW,
	VIRTUAL,
	VISIBLE,
	WHEN,
	WHERE,
	WHILE,
	WITH,
	WITHOUT,
	WRITE,
	XOR,
	YEAR(SqlKeywordType.TYPE),
	YEAR_MONTH,
	ZEROFILL,
	//
	;

	private static final SqlKeywordMap map = new SqlKeywordMap();
	private final SqlKeywordType type;

	private SqlKeyword() {

		this.type = SqlKeywordType.NORMAL;
	}

	private SqlKeyword(SqlKeywordType type) {

		this.type = type;
	}

	public static boolean isKeyword(String text) {

		return map.get(text) != null;
	}

	public static SqlKeyword getByText(String text) {

		SqlKeyword keyword = map.get(text);
		if (keyword != null) {
			return keyword;
		} else {
			throw new IllegalArgumentException(String.format("No SQL keyword '%s' found.", text));
		}
	}

	public boolean isFunction() {

		return type == SqlKeywordType.FUNCTION;
	}

	public boolean isType() {

		return type == SqlKeywordType.TYPE;
	}
}
